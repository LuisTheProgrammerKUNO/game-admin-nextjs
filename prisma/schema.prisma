// === GENERATOR & DATASOURCE ===
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["admin_access", "neon_auth", "public", "modules_schema"]
}

// =======================
//   ADMIN SCHEMA
// =======================
model admin {
  id              Int             @id @default(autoincrement())
  username        String          @unique
  email           String
  password        String?
  last_login      DateTime?       @db.Timestamptz(6)
  role            String?         @default("admin")
  status          String?         @default("active")
  failed_attempts Int?            @default(0)
  created_at      DateTime?       @default(now()) @db.Timestamp(6)
  updated_at      DateTime?       @default(now()) @db.Timestamp(6)
  announcements   announcements[]
  login_history   login_history[]

  @@schema("admin_access")
}

model announcements {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(255)
  message    String
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  is_active  Boolean?  @default(true)
  author_id  Int?
  admin      admin?    @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("admin_access")
}

model login_history {
  id         Int       @id @default(autoincrement())
  admin_id   Int
  login_time DateTime? @default(now()) @db.Timestamp(6)
  ip_address String?
  user_agent String?
  success    Boolean
  admin      admin     @relation(fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("admin_access")
}

// =======================
//   NEON AUTH MIRROR
// =======================
// ⚠️ NOTE: Postgres does NOT allow DEFAULT expressions that reference other columns.
// If you plan to `db push` or `migrate`, remove the @default(dbgenerated(...)) parts.
// If this table is managed externally, you can keep them for type-safety only.
model users_sync {
  raw_json   Json
  id         String    @id
  name       String?
  email      String?
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  users      users?

  @@index([deleted_at])
  @@schema("neon_auth")
}


// =======================
//   PUBLIC USERS
// =======================
model users {
  id           String   @id                           // change id to String
  username     String   @unique
  first_name   String
  last_name    String
  middle_name  String?
  age          Int?
  school       String?
  birthday     DateTime?  @db.Date
  location     String?
  is_active    Boolean?   @default(true)

  /// Column is `deletion_req` in DB
  deletion_req DateTime?  @db.Timestamptz(6)

  /// Relation to neon_auth.users_sync (String → String)
  users_sync   users_sync @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}


// =======================
//   PASSCODES
// =======================
model passcodes {
  id          Int      @id(map: "AdminPasscode_pkey") @default(autoincrement())
  code        String
  valid_from  DateTime
  valid_until DateTime

  @@schema("admin_access")
}

// =======================
//   QUIZ MODULES
// =======================
enum QuestionType {
  mul_choice
  fill_blank
  identification

  @@schema("modules_schema")
}

model Module {
  module_id Int    @id @default(autoincrement())
  name      String @db.VarChar(100)

  // back-rel
  questions Question[] @relation("ModuleQuestions")

  @@map("modules")
  @@schema("modules_schema")
}

model Question {
  question_id Int          @id @default(autoincrement())
  module_id   Int
  type        QuestionType
  text        String       @db.Text

  // FK -> modules.module_id
  module Module @relation("ModuleQuestions", fields: [module_id], references: [module_id], onDelete: Cascade, onUpdate: Cascade)

  // back-rel
  answers Answer[] @relation("QuestionAnswers")

  @@map("questions")
  @@schema("modules_schema")
}

model Answer {
  answer_id   Int     @id @default(autoincrement())
  question_id Int
  text        String  @db.VarChar(255)
  is_correct  Boolean @default(false)

  // FK -> questions.question_id
  question Question @relation("QuestionAnswers", fields: [question_id], references: [question_id], onDelete: Cascade, onUpdate: Cascade)

  @@map("answers")
  @@schema("modules_schema")
}
