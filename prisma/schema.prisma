generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["modules_schema", "neon_auth", "public"]
}

model users_sync {
  raw_json   Json
  id         String    @id @default(dbgenerated("(raw_json ->> 'id'::text)"))
  name       String?   @default(dbgenerated("(raw_json ->> 'display_name'::text)"))
  email      String?   @default(dbgenerated("(raw_json ->> 'primary_email'::text)"))
  created_at DateTime? @default(dbgenerated("to_timestamp((trunc((((raw_json ->> 'signed_up_at_millis'::text))::bigint)::double precision) / 1000::double precision))")) @db.Timestamptz(6)

  deleted_at DateTime? @db.Timestamptz(6)
  users      users?

  @@index([deleted_at])
  @@schema("neon_auth")
}


//
// =======================
//  APP USERS + TRANSACTIONS
// =======================
model users {
  id                 String         @id
  first_name         String
  last_name          String
  middle_name        String?
  school             String?
  birthday           DateTime?      @db.Date
  location           String?
  is_active          Boolean?       @default(true)
  deletion_req       DateTime?      @db.Timestamptz(6)
  stripe_customer_id String?        @unique
  coins              Int?           @default(0)
  transactions       transactions[]
  users_sync         users_sync     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model processed_events {
  id String @id

  @@schema("public")
}

model transactions {
  id                Int       @id @default(autoincrement())
  user_id           String
  amount            Int
  coins             Int
  stripe_payment_id String    @unique
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  product_id        String?
  product_name      String?
  users             users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  users users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model Module {
  module_id Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)

  questions Question[] @relation("ModuleQuestions")

  @@map("modules")
  @@schema("modules_schema")
}

model Question {
  question_id Int      @id @default(autoincrement())
  module_id   Int
  type        QuestionType
  text        String

  answers     Answer[] @relation("QuestionAnswers")
  module      Module   @relation("ModuleQuestions", fields: [module_id], references: [module_id], onDelete: Cascade)

  @@map("questions")
  @@schema("modules_schema")
}

model Answer {
  answer_id   Int      @id @default(autoincrement())
  question_id Int
  text        String   @db.VarChar(255)
  is_correct  Boolean  @default(false)
  question    Question @relation("QuestionAnswers", fields: [question_id], references: [question_id], onDelete: Cascade)

  @@map("answers")
  @@schema("modules_schema")
}

enum QuestionType {
  mul_choice
  fill_blank
  identification

  @@schema("modules_schema")
}
